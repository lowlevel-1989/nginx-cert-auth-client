server {
  listen 80;
  server_name  main.example.es;

  return 301 https://main.example.es$request_uri;
}

server {
  listen 443   ssl;
  server_name  main.example.es;

  access_log   /var/log/nginx/example_access.log main;
  error_log    /var/log/nginx/example_error.log  notice;

  ssl_protocols       TLSv1.2;
  ssl_ciphers         ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;

  # letsencrypt certificate
  ssl_certificate     /etc/ssl/letsencrypt/example.es/fullchain.pem;
  ssl_certificate_key /etc/ssl/letsencrypt/example.es/privkey.pem;


  location @service-auth-client {
    # variables de control, utilizadas para saber si tenemos que ir
    # al servicio de validacion de certificados, cert.example.es
    set $valid_cert 0;

    if ($cookie_1092837465 = "") {
      set $valid_cert 1;
    }

    if ($cookie_1092837465 = 0) {
      set $valid_cert 1;
    }

    # Cookie 1092837465 utilizada para traspaso de mensaje entre servicios
    # Se reinicia a 0, si solicitan de nuevo el certificado
    add_header Set-Cookie "1092837465=0; Domain=.example.es; Path=/";

    # Ir al servicio cert.example.es
    if ($valid_cert) {
      set $x_callback $scheme://$host$request_uri;

      # key:   es para validar que no se modifico el callback
      # back:  es donde regresara luego de la validación
      set $secret 'thisisverysecretstuff';
      set_hmac_sha256   $signature $secret $x_callback;
      set_encode_base64 $signature;
      set_escape_uri    $signature;
      set_escape_uri    $x_callback;

      return 302 https://cert.example.es/?key=$signature&back=$x_callback;
    }

    # SI NO SE REALIZA EL 302, PASA A HACER PROXY CON EL CERTIFICADO

    # Crear compatibilidad de certificado con apache
    set $lua_client_cert "";
    set $unescape_client_cert "";

    #
    #   $ssl_client_escaped_cert
    #   returns the client certificate in the PEM format (urlencoded)
    #
    #   decodifica el certificado
    set_unescape_uri $unescape_client_cert $cookie_cert;

    # patch nginx cert a apache
    rewrite_by_lua_block {
      ngx.var.lua_client_cert = ngx.re.gsub(ngx.var.unescape_client_cert, "\n", " ")
    }

    # este header es solo para debug, no es necesario
    add_header SSL_CLIENT_CERT $lua_client_cert;

    # paso dos versiones de header porque no se cual es la que espera el backend
    proxy_set_header SSL-CLIENT-CERT $lua_client_cert;
    proxy_set_header SSL_CLIENT_CERT $lua_client_cert;

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_pass https://main.example.es;  # aqui el backend
  }


  location /Identificate {
    # Utilizamos el bloque de autenticación, esto se puede replicar
    # en multiples location
    try_files NONE @service-auth-client;
  }

  location / {
    # Crear compatibilidad de certificado con apache
    set $lua_client_cert "";
    set $unescape_client_cert "";

    #
    #   $ssl_client_escaped_cert
    #   returns the client certificate in the PEM format (urlencoded)
    #
    #   decodifica el certificado
    set_unescape_uri $unescape_client_cert $cookie_cert;

    # patch nginx cert a apache
    rewrite_by_lua_block {
      ngx.var.lua_client_cert = ngx.re.gsub(ngx.var.unescape_client_cert, "\n", " ")
    }

    # este header es solo para debug, no es necesario
    # este header estara en la respuesta, se puede ver desde el navegador
    add_header SSL_CLIENT_CERT $lua_client_cert;

    # paso dos versiones de header porque no se cual es la que espera el backend
    # estos header solo se pasan al backend
    proxy_set_header SSL-CLIENT-CERT $lua_client_cert;
    proxy_set_header SSL_CLIENT_CERT $lua_client_cert;

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_pass https://main.example.es;  # aqui el backend
  }
}
